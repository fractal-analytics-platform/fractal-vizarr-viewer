diff --git a/src/index.tsx b/src/index.tsx
index 4f2114c..e0841d5 100644
--- a/src/index.tsx
+++ b/src/index.tsx
@@ -1,5 +1,5 @@
 import { ThemeProvider } from "@material-ui/styles";
-import { Provider, atom } from "jotai";
+import { Provider, atom, useAtomValue } from "jotai";
 import { useSetAtom } from "jotai";
 import * as React from "react";
 import ReactDOM from "react-dom/client";
@@ -7,7 +7,7 @@ import ReactDOM from "react-dom/client";
 import Menu from "./components/Menu";
 import Viewer from "./components/Viewer";
 import "./codecs/register";
-import { type ImageLayerConfig, type ViewState, addImageAtom, atomWithEffect } from "./state";
+import { type ImageLayerConfig, type ViewState, addImageAtom, atomWithEffect, sourceErrorAtom } from "./state";
 import theme from "./theme";
 import { defer, typedEmitter } from "./utils";
 
@@ -36,6 +36,7 @@ export function createViewer(element: HTMLElement, options: { menuOpen?: boolean
   const { promise, resolve } = defer<VizarrViewer>();
 
   function App() {
+    const sourceError = useAtomValue(sourceErrorAtom);
     const addImage = useSetAtom(addImageAtom);
     const setViewState = useSetAtom(viewStateAtom);
     React.useImperativeHandle(
@@ -55,8 +56,31 @@ export function createViewer(element: HTMLElement, options: { menuOpen?: boolean
     }, []);
     return (
       <>
-        <Menu open={options.menuOpen ?? true} />
-        <Viewer viewStateAtom={viewStateAtom} />
+      {sourceError === null &&
+        <>
+          <Menu open={options.menuOpen ?? true} />
+          <Viewer viewStateAtom={viewStateAtom} />
+        </>
+      }
+      {sourceError !== null &&
+        <div style={{
+          position: 'fixed',
+          top: 0,
+          bottom: 0,
+          left: 0,
+          right: 0,
+          color: '#fff',
+          display: 'flex',
+          alignItems: 'center',
+          textAlign: 'center',
+          justifyContent: 'center',
+          fontSize: '120%'
+        }}>
+          <p>{
+            `Error: server replied with "${sourceError}" when loading the resource`
+          }</p>
+        </div>
+      }
       </>
     );
   }
diff --git a/src/state.ts b/src/state.ts
index 4eefd0a..f2664f8 100644
--- a/src/state.ts
+++ b/src/state.ts
@@ -128,17 +128,24 @@ export type ControllerProps<T = object> = {
   layerAtom: PrimitiveAtom<WithId<LayerState>>;
 } & T;
 
+export const sourceErrorAtom = atom<string | null>(null);
+
 export const sourceInfoAtom = atom<WithId<SourceData>[]>([]);
 
 export const addImageAtom = atom(null, async (get, set, config: ImageLayerConfig) => {
   const { createSourceData } = await import("./io");
   const id = Math.random().toString(36).slice(2);
-  const sourceData = await createSourceData(config);
-  const prevSourceInfo = get(sourceInfoAtom);
-  if (!sourceData.name) {
-    sourceData.name = `image_${Object.keys(prevSourceInfo).length}`;
+  try {
+    const sourceData = await createSourceData(config);
+    const prevSourceInfo = get(sourceInfoAtom);
+    if (!sourceData.name) {
+      sourceData.name = `image_${Object.keys(prevSourceInfo).length}`;
+    }
+    set(sourceInfoAtom, [...prevSourceInfo, { id, ...sourceData }]);
+  } catch (err) {
+    console.log('error opening source data', err);
+    set(sourceErrorAtom, (err as Error).message);
   }
-  set(sourceInfoAtom, [...prevSourceInfo, { id, ...sourceData }]);
 });
 
 export const sourceInfoAtomAtoms = splitAtom(sourceInfoAtom);
